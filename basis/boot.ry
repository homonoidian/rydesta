;;; I. OPERATORS

;--- Precedence values.

_p_ternary = 1
_p_junction = 2
_p_identity = 3
_p_addition = 4
_p_multiplication = 5
_p_power = 6
_p_index = 7
_p_range = 8

#:set-guard-precedence _p_identity

; -----------------------------------------------


;--- Ternary: if, else.
; Examples:
;   >>> 1 if false ==> false
;   >>> 1 if true ==> 1
;   >>> false else 1 ==> 1
;   >>> "hello" else 1 ==> "hello"
;   >>> "good" if true else "bad" ==> "good"

#:set-precedence _p_ternary

quoting 'if consequence condition ->
  case unquote condition {
    false => false
    _ -> unquote consequence
  }

quoting 'else condition consequence -> {
  condition = unquote condition
  case condition {
    false => unquote consequence
    _ -> condition
  }
}


; --- Junction: and, or.
; Examples:
;   >>> 1 and 2 ==> 2
;   >>> 1 or 2 ==> 1
;   >>> false and 1 ==> false
;   >>> false or 2 ==> 2
; NOTE: junctions quote; e.g., `(say "A") and false` won't `say`.

#:set-precedence _p_junction

quoting 'and lhs rhs ->
  unquote rhs if unquote lhs

quoting 'or lhs rhs ->
  unquote lhs else unquote rhs


; --- Python wrapper ----------------------------

obj _PyWrap {
  operator = #:import "operator"

  attr parent child ->
    ; Call `getattr()` with parent, child of str as arguments.
    #:call (#:builtin "getattr") [parent (#:to-py child)]

  eq? lhs rhs ->
    ; Check if two Python objects are equal via `__eq__`.
    #:wraps bool (#:call (attr lhs "__eq__") [rhs])

  call callee args ->
    ; Convert args of vec to Python and apply 'callee'.
    #:call callee (#:wraps vec (#:to-py args))

  boolean op lhs rhs ->
    #:wraps bool (call (attr operator op) [lhs rhs])

  arithmetic typ op lhs rhs ->
    #:wraps typ (call (attr operator op) [lhs rhs])
}

_Python = new _PyWrap

; -----------------------------------------------


;--- Identity: not, <, >, <=, >=, is, are, of, etc.
; Examples:
;   >>> not 1 ==> false
;   >>> not false => true
;   >>> [(1 is 2) (1 is not 2)] ==> [false true]
;   >>> [([1 2 3] are 3) ([1 2 3] are not 3)] ==> [false true]
;   >>> [3 3 3] are 3 ==> true
;   >>> [] of num ==> false
;   >>> [1 2 3] are of num ==> true
;   >>> 1 > 2 ==> false
;   >>> 1 < 2 ==> false

#:set-precedence _p_identity

'not (false) -> true
'not _ -> false

'is _ _ -> false
'is x (x) -> true
'is_not lhs rhs -> not (lhs is rhs)

'are [] _ -> false
'are [x] rhs -> x is rhs
'are [x xs+] rhs -> x is rhs and xs are rhs
'are_not lhs rhs -> not (lhs are rhs)

'of lhs T ->
  if _Python.eq? (_Python.attr T "type") (#:to-py "type") {
    true if _Python.eq? (_Python.attr lhs "type") (_Python.attr T "value")
  }
'not_of lhs T -> not (lhs of T)

; _any_of is a bypass so `1 of "foobar"` is not an infinite loop
'any_of lhs [] -> false
'any_of lhs [T ts*] -> lhs of T or lhs any of ts

'are_of [] _ -> false
'are_of [x] T -> x of T
'are_of [x xs+] T -> x of T and xs are of T
'are_not_of lhs T -> not (lhs are of T)

'in _ [] -> false
'in entity [item rest*] -> entity is item or entity in rest
'not_in entity items -> not (entity in items)

for (lhs of num) (rhs of num) {
  '< -> _Python.boolean "lt" lhs rhs
  '> -> _Python.boolean "gt" lhs rhs
  '<= -> _Python.boolean "le" lhs rhs
  '>= -> _Python.boolean "ge" lhs rhs
}


;--- Math operators: +, -, *, /, etc.

#:set-precedence _p_addition

for (lhs of num) (rhs of num) {
  '+ -> _Python.arithmetic num "add" lhs rhs
  '- -> _Python.arithmetic num "sub" lhs rhs
}

'+ (lhs of str) (rhs of str) ->
  _Python.arithmetic str "add" lhs rhs

'+ (lhs of vec) (rhs of vec) ->
  _Python.arithmetic vec "add" lhs rhs

'+ (x of num) -> x
'- (x of num) -> 0 - x


#:set-precedence _p_multiplication

'/ (lhs of num) (rhs, rhs of num and rhs is not 0) ->
  _Python.arithmetic num "truediv" lhs rhs

'* (lhs of num) (rhs of num) ->
  _Python.arithmetic num "mul" lhs rhs

'* (lhs any of [str vec]) (rhs of num) ->
  _Python.arithmetic (type lhs) "mul" lhs (_Python.call (#:builtin "int") [rhs])


;;; II. FUNCTIONS

default entity ->
  ;# Return the value considered default for an entity.
  case type entity {
    num => 0
    str => ""
    vec => []
  }


;--- Bits of functional programming.

for (fn of variations) {
  map [] -> []
  map [x xs*] ->
    [(fn x)] + map fn xs

  inject [] acc -> acc
  inject [x rest*] (acc, acc of type x) ->
    inject fn rest (fn acc x)

  inject [] -> nothing
  inject [x rest*] ->
    inject fn ([x] + rest) (default x)
}


;--- Reflectivity.

header (fn of function) ->
  #:wraps str (_Python.call (_Python.attr fn "dump") [])

dump (vars of variations) ->
  #:wraps vec (_Python.attr vars "variations")


;--- I/O

_value-if-str x ->
  #:to-py x if x of str else x

say entity ->
  #:call (#:builtin "print") [(_value-if-str entity)] and entity

slurpy say entities ->
  map say entities

ask entity ->
  #:wraps str (#:call (#:builtin "input") [(_value-if-str entity)])
